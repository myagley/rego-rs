use ordered_float::NotNan;

use crate::Location;
use crate::ast::*;
use crate::parser::lexer::Error;
use crate::parser::token::{StringLiteral, Token};
use crate::value::{Number, Value};

grammar<'input>(input: &'input str);

extern {
    type Location = Location;
    type Error = Error;

    enum Token<'input> {
        "as" => Token::As,
        "default" => Token::Default,
        "else" => Token::Else,
        "false" => Token::False,
        "import" => Token::Import,
        "not" => Token::Not,
        "null" => Token::Null,
        "package" => Token::Package,
        "set" => Token::Set,
        "some" => Token::Some,
        "true" => Token::True,
        "with" => Token::With,

        "integer-literal" => Token::IntLiteral(<i64>),
        "float-literal" => Token::FloatLiteral(<NotNan<f64>>),
        "string-literal" => Token::StringLiteral(<StringLiteral<'input>>),

        "id" => Token::Identifier(<&'input str>),

        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "&" => Token::Amper,
        "|" => Token::Vbar,

        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,

        ";" => Token::SemiColon,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "_" => Token::UnderScore,
        ":=" => Token::Assign,
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Module: () = Package Import* Policy;

Import: () = "import" Ref ("as" Var)? ";"+;

Package: () = "package" Ref ";"+;

Policy: () = Rule*;

Rule: () = {
    "default" Var "=" Term ";"+,
    Var ( AssignOrEqual Term )? RuleBody* ";"+,
    Var "[" Term "]" RuleBody* ";"+,
    Var "[" Term "]" "=" Term RuleBody* ";"+,
    Var "(" Comma<Term> ")" "=" Term RuleBody* ";"+,
};

#[inline]
AssignOrEqual: Opcode = {
    ":=" => Opcode::Assign,
    "=" => Opcode::Eq,
};

RuleBody: () = {
    ( "else" ( "=" Term)?)? "{" Query "}",
};

pub Query: Query<'input> = {
    <h:Statement> <t:( ";"+ <Statement> )*> ";"? => {
        let mut t = t;
        t.reverse();
        t.push(h);
        t.reverse();
        Query::new(t)
    }
};

Statement: Statement<'input>  = {
    <StatementTarget> <WithModifier*> => Statement::new(<>),
}

#[inline]
StatementTarget: StatementTarget<'input> = {
    Expr => StatementTarget::Expr(<>),
    "not" <Expr> => StatementTarget::NotExpr(<>),
    "some" <Comma<Var>> => StatementTarget::Some(<>),
};

WithModifier: With<'input> = {
    "with" <Term> "as" <Term> => With::new(<>),
};

pub Expr: Box<Term<'input>> = {
    Term AssignOrEqual Tier0 => Box::new(Term::BinOp(<>)),
    Tier0,
};

Tier<Op, NextTier>: Box<Term<'input>> = {
    Tier<Op, NextTier> Op NextTier => Box::new(Term::BinOp(<>)),
    NextTier,
};

Tier0 = Tier<Tier0Op, Tier1>;
Tier1 = Tier<Tier1Op, Tier2>;
Tier2 = Tier<Tier2Op, Tier3>;
Tier3 = Tier<Tier3Op, Term>;

Tier3Op: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "&" => Opcode::And,
    "|" => Opcode::Or,
};

Tier2Op: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Tier1Op: Opcode = {
    "<" => Opcode::Lt,
    "<=" => Opcode::Lte,
    ">" => Opcode::Gt,
    ">=" => Opcode::Gte,
};

Tier0Op: Opcode = {
    "==" => Opcode::EqEq,
    "!=" => Opcode::Ne,
};

Ref: Ref<'input> = {
    <t:RefTarget> <a:RefArg*> => Ref::new(Box::new(t), a),
};

#[inline]
RefTarget: RefTarget<'input> = {
    Var => RefTarget::Var(<>),
    Array => RefTarget::Collection(<>),
    ArrayCompr => RefTarget::ArrayCompr,
    Object => RefTarget::Collection(<>),
    ObjectCompr => RefTarget::ObjectCompr,
    Set => RefTarget::Collection(<>),
    SetCompr => RefTarget::SetCompr,
    ExprCall => RefTarget::ExprCall(<>),
};

#[inline]
RefArg: RefArg<'input> = {
    RefArgDot,
    RefArgBrack,
};

#[inline]
RefArgBrack: RefArg<'input> = {
    "[" <RefArgBrackParam> "]"
};

#[inline]
RefArgBrackParam: RefArg<'input> = {
    Scalar => RefArg::Scalar(<>),
    Var => RefArg::Var(<>),
    Array => RefArg::Collection(<>),
    Object => RefArg::Collection(<>),
    Set => RefArg::Collection(<>),
    "_" => RefArg::Anon,
};

#[inline]
RefArgDot: RefArg<'input> = {
    "." <Var> => RefArg::Var(<>),
};

// There is some ambiguity in the grammar
// The left hand side should be Var ("." Var)*.
// This conflicts with Ref
ExprCall: ExprCall<'input> = {
    <r:Ref> "(" <t:Comma<Term>> ")" => ExprCall::new(r, t),
};

Term: Box<Term<'input>> = {
    Ref => Box::new(Term::Ref(<>)),
    Scalar => Box::new(Term::Scalar(<>)),
    "(" <Tier0> ")",
};

ArrayCompr: () = "[" Term  "|" Query "]";

SetCompr: () = "{" Term "|" Query "}";

ObjectCompr: () = "{" ObjectItem "|" Query "}";

Array: Collection<'input> = "["  <Comma<Term>> "]" => Collection::Array(<>);

Set: Collection<'input> = {
    NonEmptySet,
    EmptySet,
};

NonEmptySet: Collection<'input> = {
    "{" <v:(<Term> ",")*> <e:Term> "}" => {
        let mut v = v;
        v.push(e);
        Collection::Set(v)
    }
}

EmptySet: Collection<'input> = "set" "(" ")" => Collection::Set(vec![]);

Object: Collection<'input> = "{" <Comma<ObjectItem>> "}" => Collection::Object(<>);

ObjectItem: (Box<Term<'input>>, Box<Term<'input>>) = <k:ObjectKey> ":" <v:Term> => (k, v);

#[inline]
ObjectKey: Box<Term<'input>> = {
    Scalar => Box::new(Term::Scalar(<>)),
    Ref => Box::new(Term::Ref(<>)),
};

Var: &'input str = "id";

Scalar: Value<'input> = {
    Bool,
    Null,
    Number,
    String,
};

#[inline]
Null: Value<'input> = {
    "null" => Value::Null,
};

#[inline]
Bool: Value<'input> = {
    "true" => Value::Bool(true),
    "false" => Value::Bool(false),
};

#[inline]
String: Value<'input> = {
    "string-literal" => Value::String(<>.unescape()),
};

#[inline]
Number: Value<'input> = {
    "integer-literal" => Value::Number(Number::from(<>)),
    "float-literal" => Value::Number(Number::from(<>)),
};
